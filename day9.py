ciphertexts = [
"50e37ad8108232721deccdcd479afa7dbb3171193a1e46f5e20edd7dbe540e74f6b326ccd318a0152fadf84a58346d17ec32a0d865bc7cb22c30ed689abad2630883995479b06658ae06badc1d49be1e8ba405cb2770696c178f152e07cca40f1c2bd13fb7f76fb8711ed4c09322242dba",
"27e8d4cbe948cd6a29ca16d26af82b95e5b3361d7d420ccf5f17e4f09242956b9e6c854354cdb0d8fbdba03dc99b8b6df73f6ccf3e4b7773ae05bb53d9d9624903fbdb488227233671b98a06b90429",
"251779a95ae66ed14fe17e9507c0c0dc702aa2e15d8f9d085267f37b7125b2bfbaca599d95a2c1777c0d30dd99ea5584dfd51268b350ca2ac12cc78dc34bdee66ccfaf364536787a93248d09fa8c7292fcfc3dcdba493c5067e51d1f80b48fb23333",
"93a4ac12f8cd685aee2dcf2a10a102f8375b569ae3bca8dda4b7d4e8268740c212e64efb08eaefbced2931fc01b0b2653717b88e0001327dc2b32aa33a444266e96cdefc22eb866486b515ec8ff5a8a925893407648a7160af4e8ddd1850886a208dbf016ec79b95332b51",
"240cf10d78bd4c31f6468fbe9d9b3a3064470ca3656b5512537d0d728f6567def942cc07f875b3ede05ca08bc9a6e71ed544b2d93fa3f768f50c3cb6af2235d8549109f158aa72be512e3206c774f531796ea6da0ba829f0e606d2806781d2b075a6cde2861a3d40cef24e535a346fdd",
"02309819499a62699eb0c879bc413b682b12f338e65f397a78952bfe6456f913caf841585a2c6d8f466e0599ca76ee9103a49b470e5c0ab334c7eb09ab00fd9c48ddbeeff7",
"72a7c895049f0754b96d187231398afd1fdc4e6535ffa66c4414d458905693d0079593e4e9ac6e75cce29012180a1d57923f3cad6ae43519dbda3563f7af0e24b6f96c234131129e09ef61cd3d0577932165690ed677ef6bb690d11583",
"c52e0254c4e23b6f375b07776fe38cde75f1619bb5abf1987c51fc743e8e9e7384801f82b140abde73bda2c182b00b99c229375601a4e9788dbdc2ef8bedf189d354",
"8fbd8705c84d67e6420803619226af55e223ad3b6ca0f7e0890cec5a4dd4bdaff5c724b837d60839610a100447b6e04afbdf55ba4be223b67e5399f98d1d246c669607ab429121ba9bbb924715152b356f7a1b4e4e383f93b65f50473a91ba2d6cd78fbe",
"1615b7782f993ab728c9b0bbad7c92483eb4e0cde45063dce7eaba006e86680d4ea4bcdbb3dfc41013bb87bd1a3ef35b3bb41ff74511d3e79789fe9157ff98ed0af728ec82",
"326364e2bcfddc584577849d671123b76afa79a9b76c1809ff3dc9faa099efc763c6ffbc1ade44de4f485800ba10b9d2e5f650196c877765cac0f56f2149fbc9f5607f96e4097d6667aae8a2c653f9586d19ee",
"36201fd8739fddd423275756b400b0e4b96c4290cae24bd18cd6fc1580263e9dce621f737cbbe0c1ae8ee8c98c4f157e21d52fd53b1e20b1b76a8a4035edd17b",
"84916c296e6f9071f4418a928a43f16d3ec2917a007699553acd5f1dfa32560ed1a683fa1f3acdc89c207e6d00145f56208daff50762504a3c67b57e2e1c1921f8a375db4f9b",
"4280eb319969c79919df27eb22d62aea420a1956ee524e24d4079368c7a3e767a89f7c3202274542970471a93a6736a4d6167cba7de95bd0ff307955f4c597b60b02a0d1c704fb4e3998f9c0",
"6426e7b3ca9bc8458df97b4a5fe77fb8f1383dacf204622188cfa66aa50fa6a39b6db809bfa2133899cbd6b613f9010ebc97453b6813a251a751df344ad21e32c0d3c0cc2c7f32fdd3ee8ee898",
"c9de69d417cfd4f94668c0795999eb4d5a8c46c7b8ee15cd881e1ddefaeb9ed05454248729ff6fb28032bbb67713103c3aa46f7d0dcfff55b60b87bb2b5b84b5773d1db39027c175e3bc1bd2937c057b04b241b01f8418588fd40237aa1bd445c35bd87643de172e95204d920bea9581f544",
"2d8f020ec70c2e400a0ed8984b40a1299a86fdbd7d9a6ea6cca4cd6507c8c1bd1b25e9fd485e2276a9242f87b29d5c32452164fd1ff54b05f70b2d0547c8007ff8a74e18b5b61a6f214d1a21a2",
"730f6ebb632d83bab750b37d18026413fed0b714075bd305164fd36bc340a2f8a6ffbb46eb2bf99a6a5dbfbb9e432676566b048d200e78cfdaf799513fa77719d070cd4801d6644000ff7f773304a5711cf2fa8b0f3f87892b036c308d9f38b99c6ab70e09fdb434af1d1dae",
"e4a195f46beb671b87568ad0e15394f53102ad9d6977b38057dd63a75e1c8fe4f422a49062be14948c92c50237270830b785f18d6f05891634dd765ae3459aa69ae4ea194bf1277ca53a5f04411a3ea622859b29ebb6fe2dd7a58372f5df9060e12fc4b676",
"77bca271f77a58af1ce782c505fd16844f218d879c898212fb8090592fc057d94d8fed6f585d994119143c332caf81304c853d2054e56d3f51240775f7557b6e81",
"0a9a0818d9fe5fdd8fd39c1c7dadddd873d9bd1ebd7bb86e5b66df5cb4b388be0730eb17cb5feccc5adc804b1b6beeda9be794051d8423e1aafadf5e8031997031ccc44665",
"a601c3941f7c723d0129ecefc3df9f92fd62d5f73a5bfe1301b33e46a1b017789092c14a0607ecf5f32d7e04df8badcc3b019b96967168bce28773f25415238e6ff58bfff0d01243805ecc422c2838ab7baa4e66675abcd4c852816ffea4ee2c70e73b13bf90",
"5574226cb0e4ab7134bbb4853be87bd939fc2a0f6bdfafa8d2205535cf31201e900bb84ca04fb141a4a6ab968d41e2a806f50bb4",
"f01c55393b62cbf1a19068a1cd1e937f8e8a817cb8f28d54de5ad07e7ad39fcd789facfea4e14d7ff28c7c405f26d7f2a561",
"bd16506e3d16fae6c00624ec020013698b9a039284a582ef782bb370755079347597b5d89db95cca2b9f43a23b5055d1f4ce1e98f48009ddb16d5b0c9bc32960a2031d1821fe06c5f690c3f9d79d50f94121354900ee53a5e90f9ae76e808d5d725ce270c3fbcd3fc00de9e6dddf2bef6327",
"f72a6562ea77cc4a1c8fb183535716f5921ce375b6a7199bfbc3aed7e664ac55f9f1755d0d4cf2a6bd5882216e9607a78df87983d681e0d33d041c0a184a577aedebc90108cf",
"67ab40a9d9f34f19cf9347b4eb47f974f0093ee81de822bcb3fe38736abc4ea6f673b6bce45184096353ef1a3f993814d3bc548a2a06afff0dcdd0c8c39083c228c5cc973a0b047b12d0faebf968a265f842452cad1bd7aaa14f00e15168845fb67a0bef3c",
"8bd39cfbb26945503a73c3c24b9b05cc6fb1c76392baab95ad66797f8f7be6add6ac237c3fe1830afa366d09d30c186a0027a8dbeb450d5bc4d2edac99aab7f98531d9b7acbf865056dbc339b68135e51547e47392a83f77151c85384b5929c75731bade5f2018294c7f8039d5a942a53f7d",
"b6f7f5fef13bf22b890e13e728e65b747d89ac86829c2a3dcb1b5e5a46e7b134db075bc24a52d8b4d1f912301c22728979a61e0517f0a769a1b16b26a947ae12905349b855ac1c589c91286f939801a27ab7",
"68010811834041e0bb12392cb44dc621e82de29eadd5de2db02cf1602b9136ab510363ac05f2fd844147485b0a3d7cf60671d51145d2c5337b043ad7acfa75979a4da66430",
"9cd223373f44872b6c03da487629835c77c57707925e91547e1bd44cb5e3313d85ef1bdbde328219252c0f1c31f7929306fcd51897c6cddf33",
"1e9a35f1ee75b0b4e0f1cb3e002878b4399796fae5f78608a67577ee3ca4602a0dcb6515937cfcd73afd556c23e472d817c98522cc40cd2d93d8d25ba9934e24e727bc1b4c7fea74646f15"
]

key_enc = "44b568558673c33630b4eb1d872eabf04d28e4a9fe2ba533307b6bd7e4680b5fc4fba9e6d7d9c6eff7ee17f9dfdbc52f"

import requests

def xor_bytes(bytes1, bytes2):
    """Perform XOR between two byte arrays."""
    return bytes(a ^ b for a, b in zip(bytes1, bytes2))

def find_key(ciphertexts, key_enc):
    """Find the potential encryption key."""
    potential_keys = []
    for candidate in ciphertexts:
        potential_E = candidate[:-16]  # Exclude the tag
        potential_K = xor_bytes(potential_E, key_enc[:-16])  # Exclude the tag
        potential_keys.append(potential_K.hex())
    return potential_keys

# Convert ciphertexts and the encrypted key from hex to bytes
ciphertexts_bytes = [bytes.fromhex(ct) for ct in ciphertexts]
key_enc_bytes = bytes.fromhex(key_enc)

# Find potential keys
potential_keys = find_key(ciphertexts_bytes, key_enc_bytes)

# URL and headers for the POST request
url = 'https://hexmas.quilibrium.com/submissions/0x09'
headers = {
    'Authorization': 'ur mums password',
    'Content-Type': 'text/plain'
}

# Submit each potential key as a POST request
for i, key in enumerate(potential_keys):
    response = requests.post(url, headers=headers, data=key)
    print(f"Candidate {i+1}: Key = {key}, Response = {response.text}")


